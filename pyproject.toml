[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "poprox-recommender"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.10"
keywords = []
authors = [{ name = "Karl Higley", email = "khigley@umn.edu" }]
dependencies = [
  "nltk>=3.8,<4",
  "numpy>=1.26,<2",
  "pandas==2.*",
  "swifter>=1.4,<2",
  "torch==2.*",
  "smart_open==7.*",
  "safetensors>=0.4,<1",
  "transformers>=4.41,<5",
  "poprox-concepts@git+https://github.com/CCRI-POPROX/poprox-concepts.git",
]

[project.optional-dependencies]
dev = ["dvc[s3]==3.*"]

[project.urls]
Documentation = "https://github.com/CCRI-POPROX/poprox-recommender#readme"
Issues = "https://github.com/CCRI-POPROX/poprox-recommender/issues"
Source = "https://github.com/CCRI-POPROX/poprox-recommender"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel.force-include]
"src/models" = "models/"

[tool.hatch.version]
path = "src/poprox_recommender/__about__.py"

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest>=8",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "ruff>=0.4",
  "pyright>=1.1,<2",
]
[tool.hatch.envs.lint.scripts]
typing = "pyright {args:src/poprox_recommender tests}"
style = [
  "ruff check {args:.}",
  "ruff format --check --diff {args:.}",
]
fmt = [
  "ruff format {args:.}",
  "ruff check --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["poprox_recommender"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["poprox_recommender", "tests"]
branch = true
parallel = true
omit = [
  "src/poprox_recommender/__about__.py",
]

[tool.coverage.paths]
poprox_recommender = ["src/poprox_recommender", "*/poprox-recommender/src/poprox_recommender"]
tests = ["tests", "*/poprox-recommender/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.conda-lock]
channels = [
  "pytorch",
  "conda-forge",
  "nodefaults",
]
# restrict to commonly-used platforms
# if we need to add support for windows, we can try adding that here
platforms = [
  "linux-64",
  "osx-arm64",
]
# extra deps in the conda environment
[tool.conda-lock.dependencies]
# specify our Python version
python = "=3.11"
# conda doesn't support extras, so this pulls in the DVC S3 support
dvc-s3 = "=3"
# the end-to-end recommender is deployed without CUDA, so force CPU PyTorch.
# this does not prevent us from using CUDA in the model repo to train models,
# as it will get its own environments.
pytorch-mutex = "=*=cpu"
# conda-lock doesn't look in Hatch environments, so this pulls in dev deps
ruff = ">=0.4"
pyright = ">=1.1,<2"
pytest = ">=7"
coverage = ">=6.5"
# we want conda-lock to manage the lockfiles
conda-lock = ">=2.5,<3"
# TODO: find a way to force MKL BLAS, but only on X86-64.
